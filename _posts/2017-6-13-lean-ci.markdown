---
layout: default
title:  "云研发思考——当前的研发流水线"
date:   2017-06-13
categories: devops
---

前面写了一篇关于当前粗犷型研发的问题的分析，那么什么是云研发？

咱们桌面云写代码算是云研发么？咱们用Linux VM编译调试代码算是云研发么？

个人认为不是。个人认为所有闲置不用的时候还占用资源的行为都不是云，不管是桌面云，还是编译VM，大部分时间都处于空转状态，但是资源确被占据了，别的业务无法使用。就如同长期租的度假房，每年就偶尔过去住几天，不住的时候就处于空闲状态，这是不能算作云的，Airbnb的模式才算做云。

研发如何做到类似Airbnb的能力，只在需要的时候占用资源，用完立刻释放？

难道每天晚上下班的时候把VM销毁？第二天上班在创建新的?恭喜你，思路是对的，那为何我们一直没有这么去做呢？
- 咱们的云功能都比较单一，VDI，计算云，编译云，test云等各个云都是资源云（而且资源相互隔离），资源已经按需规划好了，比如华为1人一个VDI，每个4C8G，说白了，人家只出租资源，资源如何复用不在他的范畴之内。人家就是个出租房子的而已，有人租房子干嘛不租，管他用来干啥。
- 确实也是有一定的技术难点，比如每天早上差不多都是9点多上班，此时会触发海量创建和启动VM，中间会有大量对后端存储的读写IO，这时候存储肯定顶不住。单个VDI对存储的平均IOPS约为10个，但是启动的瞬间可能有上千IOPS。如果创建一个VM需要耗时几十分钟，那估计没人愿意用了。
  - 所以当年有大量针对VM的存储产品，有ssd读写cache的，有全内存 + 重删做系统卷的，有全Flash阵列，混合阵列，还有各种针对VM的超融合产品。当年，一个VM的系统盘存储养活了无数人，好容易靠虚拟化省了点资源，尼玛还得买新存储，都是套路啊，套路。
  - 那为啥不把VM的系统盘放在本地？因为VM吹了牛皮说可以热迁移啊（当前公有云这个特性用的很少），企业的业务环境，怎么去保护这个VM都不为过，说不定这个VM run的是关键数据库呢？差点没把VM搞成两地三中心全AA（比如CEO在各地都有专属房间），您说这VM得值多钱？直接用本地存储，那是卖不出价格的。
  - 不过话说回来，热迁移用的少，但是冷迁移还是大有价值的，方便运维的动作，比如添加和回收设备，方便用户动态扩容和缩容，方便服务器的在线升级等。还有直接从快照创建VM，链接克隆VM之类的高级功能都是依赖存储的能力的。
- 我们的VDI是有状态的，也就是销毁之后再创建一个新的VDI，就不是原来那个VDI了，每天重装一次系统，谁受得了？那直接关闭状态呢，关闭状态云是不敢回收资源的，出租出去的房子就算人不用，你也不能回收啊，人家买单了啊。
- VM始终只是一个资源的抽象，就像业主出租的房间一样，出租一间就少了一间，不管人家用不用。资源利用率很低，能够服务的范围很小，一个大三房一年也只能服务3个租客而已。

正是因为VM的以上约束，给每个研发个人发放VM做云研发明显是不适合的，整个研发的动作并没有任何变化，唯一不同的是，写代码用了VDI，编译代码用了VM，仅此而已，研发个人无法感受到云带来的任何研发体验提升，反而还有下降（性能搓了）。

那么什么才是研发云的正确姿势呢？先来看看当前的研发流程。

一般来说研发会有很多动作，我们先分解下，首先是个人写代码流程：
1. 首先需要找个机器，一般是windows，安装好IDE
2. 连接到机器中，git clone下载代码到本地存储
3. 创建一个个人分支，打开IDE编写代码
4. 写完代码，配置好静态检查，查看静态检查结果，修改静态检查错误
5. 再找个编译机器，一般是linux，配置编译环境，编译，修改编译错误
6. 跑单元测试用例、接口测试用例等，通过后push到git仓库个人分支
7. 触发CI平台上个人级CI流程，把4，5，6再跑一遍（比如jenkins带几个slave机器）
8. 通过后发起MR
9. 项目commit review代码，通过后合入主干，然后触发项目级流程

然后是项目级流程：
1. 从已经配置好静态检查工具（很多时候是windows）的机器中找一台，跑静态检查
2. 从已经配置好编译环境的机器中找一台，跑编译
3. 跑LLT用例，跑HLT用例
4. 把进程拉起来，跑功能测试和性能测试用例
5. 跑打包程序，出包
6. 将包push到包库中，比如java的maven，python的pip
7. 容器化的程序需要做docker镜像，并将镜像push到docker registry
8. 选择灰度发布环境，将新的版本升级过去，进行实际场景验证
9. 灰度2周之后，解决bug，并发布稳定版本，直接升级到生产环境
10. 生产环境出现问题，能回滚先回滚，然后出补丁版本，把整个流程再来一轮。

分析整个流程发现几个问题：
1. CI平台的个人级构建流程与自己私下跑的代码编译，LLT等流程重复；即个人级流程第7步。有没办法不给研发人员Linux VM，直接使用个人CI平台来自动化的做这些事情。
2. 每个项目团队都有自己的CI平台，配置一批VM专门用来做CI，这批专用的VM利用率不高；比如，仅一个产品线就有10万VM做CI。
3. 创建新环境的时候，需要重新配置，需要大量的手工动作。

那么理想的云研发是什么样的呢？所有动作都是自动在云端完成：
1. 当然无论如何都得有个终端，VDI，笔记本，mac，pad都行
2. 在后台准备好机器，随便啥OS，能run docker就行。做好各种docker镜像，IDE镜像，静态检查镜像，编译镜像，调试镜像，打包镜像，运行时镜像，推送到镜像仓库
2. 打开浏览器，选择开发语言和需要的IDE，触发编排系统使用IDE镜像启动一个IDE容器，给IDE配置一个共享存储，比如个人的CloudFS
4. git clone下载代码，编辑代码，保存代码
5. 在界面勾选需要执行的动作，比如仅执行静态检查，或者按照流水线执行静态检查，编译，打包，测试
6. 根据勾选的动作按照顺序启动不同的容器执行动作，跑完即销毁，所有的容器使用同一个CloudFS做存储，出现错误则中断整个流水线，并输出错误信息到共享存储，直接在IDE查看即可
7. 如果需要调试怎么办？直接拉个调试容器起来，命令行进去单步跟踪呗
8. 个人级CI完成之后提交代码，review之后合入主干，进而触发项目级CI
