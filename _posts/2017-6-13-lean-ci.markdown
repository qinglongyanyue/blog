---
layout: default
title:  "云研发思考——什么是云研发"
date:   2017-06-13
categories: devops
---

## VDI & VM不是云

前面写了一篇关于当前粗犷型研发的问题的分析，那么什么是云研发？

咱们桌面云写代码算是云研发么？咱们用Linux VM编译调试代码算是云研发么？

个人认为不是。个人认为所有闲置不用的时候还占用资源的行为都不是云，不管是桌面云，还是编译VM，大部分时间都处于空转状态，但是资源确被占据了，别的业务无法使用。就如同长期租的度假房，每年就偶尔过去住几天，不住的时候就处于空闲状态，这是不能算作云的，Airbnb的模式才算做云。

桌面云和初级的VM只能算是虚拟化，跟云是没有半毛钱的关系的。当然sales们为了方便忽悠客户，把这玩意也叫云，好卖嘛。

## VM到云距离有多远？

研发如何做到类似Airbnb的能力，只在需要的时候占用资源，用完立刻释放？

难道每天晚上下班的时候把VM销毁？第二天上班在创建新的?恭喜你，思路是对的，那为何我们一直没有这么去做呢？

- 咱们的云功能都比较单一，VDI，计算云，编译云，test云等各个云都是资源云（而且资源相互隔离），资源已经按需规划好了，比如华为1人一个VDI，每个4C8G，说白了，人家只出租资源，资源如何复用不在他的范畴之内。人家就是个出租房子的而已，有人租房子干嘛不租，管他用来干啥。
- 我们的VDI是有状态的，也就是销毁之后再创建一个新的VDI，就不是原来那个VDI了，每天重装一次系统，谁受得了？那直接关闭状态呢，关闭状态云是不敢回收资源的，出租出去的房子就算人不用，你也不能回收啊，人家买单了啊。
- VM始终只是一个资源的抽象，就像业主出租的房间一样，出租一间就少了一间，不管人家用不用。资源利用率很低，能够服务的范围很小，一个大三房一年也只能服务3个租客而已。
- 确实也是有一定的技术难点，比如每天早上差不多都是9点多上班，此时会触发海量创建和启动VM，中间会有大量对后端存储的读写IO，这时候存储肯定顶不住。单个VDI对存储的平均IOPS约为10个，但是启动的瞬间可能有上千IOPS。如果创建一个VM需要耗时几十分钟，那估计没人愿意用了。

针对VM的技术问题，也有大量的各种创业公司站出来了，SDS、HCI，serverSAN都是在这个背景下提出来的：

- 当年有（2012年左右）大量针对VM的存储产品，比如Nutanix，vSAN, Virsto, Pernixdata，Tintri等，有ssd读写cache的，有全内存 + 重删做系统卷的，有全Flash阵列，混合阵列，还有各种针对VM的超融合产品。当年，一个VM的系统盘存储养活了无数人，好容易靠虚拟化省了点资源，尼玛还得买新存储，都是套路啊，套路。
- 那为啥不把VM的系统盘放在本地？因为VM吹了牛皮说可以热迁移啊，企业的业务环境，怎么去保护这个VM都不为过，说不定这个VM run的是关键数据库呢？差点没把VM搞成两地三中心全AA（比如CEO在各地都有专属房间），您说这VM得值多钱？直接用本地存储，那是卖不出价格的。当然有些创业公司的VM是有本地盘的，AWS也有基于本地盘的VM出售，主打一些互联网业务场景。
- 不过话说回来，虽然VM双活用的少，但是热迁移用的还是大有价值的，方便运维的动作，比如添加和回收设备，方便用户动态扩容和缩容，方便服务器的在线升级等。还有直接从快照创建VM，链接克隆VM之类的高级功能都是依赖存储的能力的。

由于VM有状态特性：即每个VM都是独特的，安装了特定的OS，特定的软件，有特定的配置，属于特定的某一个人或某一个应用；想让VM在空闲时间给别人用是不现实的，试想：假如在某天夜里有人用我们的VDI跑了个编译？想想都觉着恐怖。。

正是因为VM的以上约束，给每个研发个人发放VM做云研发明显是不适合的，整个研发的动作并没有任何变化，唯一不同的是，写代码用了VDI，编译代码用了VM，仅此而已，研发个人无法感受到云带来的任何研发体验提升，反而还有下降（性能搓了）。

那有没可能做到无状态的VM，任何应用和人都可以在VM空闲时使用VM，实现资源的共享？而不仅仅是资源的切割（VM仅仅只是资源的切割）。

其实一直都有人在想办法。。

## 通往云化之路

仔细分析下，确实有很多应用本身是极度的依赖VM的，包括我们自己的桌面，VM挂了我们就不能办公啦；虽然可以创建一个新的VM，把数据盘挂载上去，但是整个专属的配置，自己DIY的软件都不见啦？

那有没可能把所有自己的专属信息存在一个特定的地方，然后在任意地方拉取对应的专属信息，启动VM。其实，只要能做到快速启动和销毁，每次登陆给我重新创建新的VM，每次下班回家直接把VM销毁释放资源；我换了地域办公，帮我把机器起在新的地域即可，省的换了办公地域还得申请新的VM；每次我装了新软件，能把这次修改找个地方持久化即可。那么这个VM资源是否长期保留对于个人来说不重要了，反正我用的时候有的用，甚至体验更好了，比如换地域不用填新的电子流了。

但是遗憾的是，VM太庞大了，做一个VM镜像都是几个GB，跨地域传输是没指望了；VM启动时间分钟级，对于用户感知还是太差了。

可见要做到真正的共享经济，VM这个砖头是不行的，必须有新的抽象出来。有没可能做到秒级的启动，秒级的迁移，还不丢失状态？

懂docker的人，可能很容易看明白，我说的几个动作不就是docker run，docker stop，docker image save，docker image push么？

要做到真正的计算资源共享VM这个抽象是不够，赶紧使用容器吧。讲完共享经济，再看看我们的研发流程。

## 当前的研发流程

那么什么才是研发云的正确姿势呢？先来看看当前的研发流程。

一般来说研发会有很多动作，我们先分解下，首先是个人写代码流程：

- 首先需要找个机器，一般是windows，安装好IDE
- 连接到机器中，git clone下载代码到本地存储
- 创建一个个人分支，打开IDE编写代码
- 写完代码，配置好静态检查，查看静态检查结果，修改静态检查错误
- 再找个编译机器，一般是linux，配置编译环境，编译，修改编译错误
- 跑单元测试用例、接口测试用例等，通过后push到git仓库个人分支
- 触发CI平台上个人级CI流程，把4，5，6再跑一遍（比如jenkins带几个slave机器）
- 通过后发起MR
- 项目commit review代码，通过后合入主干，然后触发项目级流程

然后是项目级流程：

- 从已经配置好静态检查工具（很多时候是windows）的机器中找一台，跑静态检查
- 从已经配置好编译环境的机器中找一台，跑编译
- 跑LLT用例，跑HLT用例
- 把进程拉起来，跑功能测试和性能测试用例
- 跑打包程序，出包
- 将包push到包库中，比如java的maven，python的pip
- 选择灰度发布环境，将新的版本升级过去，进行实际场景验证
- 灰度2周之后，解决bug，并发布稳定版本，直接升级到生产环境
- 生产环境出现问题，能回滚先回滚，然后出补丁版本，把整个流程再来一轮。

分析整个流程发现几个问题：

- CI平台的个人级构建流程与自己私下跑的代码编译，LLT等流程重复；即个人级流程第7步。有没办法不给研发人员Linux VM，直接使用个人CI平台来自动化的做这些事情。
- 每个项目团队都有自己的CI平台，配置一批VM专门用来做CI，这批专用的VM利用率不高；比如，仅网络产品线一个产品线就有10万VM做CI。
- 创建新环境的时候，需要重新配置，需要大量的手工动作。

## 研发应该如何云化？

那么理想的云研发是什么样的呢？所有动作都是自动在云端完成：

- 当然无论如何都得有个终端，VDI，笔记本，mac，pad都行
- 在后台准备好机器，随便啥OS，能run docker就行，配置好K8S；注册到K8S master中，后续所有的环境都使用这批资源。
- 做好各种docker镜像，IDE镜像，静态检查镜像，编译镜像，调试镜像，打包镜像，运行时镜像，推送到镜像仓库
- 打开浏览器，选择开发语言和需要的IDE，触发编排系统使用IDE镜像启动一个IDE容器，给IDE配置一个共享存储，比如个人的CloudFS
- git clone下载代码，编辑代码，保存代码
- 在界面勾选需要执行的动作，比如仅执行静态检查，或者按照流水线执行静态检查，编译，打包，测试
- 根据勾选的动作按照顺序启动不同的容器执行动作，跑完即销毁，所有的容器使用同一个CloudFS做存储，出现错误则中断整个流水线，并输出错误信息到共享存储，直接在IDE查看即可
- 如果需要调试怎么办？直接拉个调试容器起来，命令行进去单步跟踪呗
- 个人级CI完成之后提交代码（附上个人级CI记录），review之后合入主干，进而触发项目级CI
- 项目级CI与个人级CI使用相同的机器，启动项目级CI流水线
- CI通过之后出包，打docker镜像，并推送到镜像仓库
- 自动或手动触发部署，在beta环境中升级，并对提供服务（限制特定的用户使用）
- beta环境运行稳定之后，自动升级到生产环境（还是同一批环境）

以上的大体的逻辑，本质就是个人再也看不到任何类型的资源，开发者只需要提交任务，K8S + docker（或者类似的软件）会帮你找地方运行，CloudFS为你在任何位置准备好存储。结果的返回有专业的地方收集，比如ELK收集日志，镜像仓库收集镜像等。

每个开发人员唯一需要的资源就是一个CloudFS存储（存放个人所有的状态），所有的计算资源都挂载这个存储去做事情，实现计算与存储的完全解耦，实现整个研发过程的完全无状态。

CloudFS，让共享无处不在，研发效率提升利器~
服务地址：cloudfs.huawei.com
