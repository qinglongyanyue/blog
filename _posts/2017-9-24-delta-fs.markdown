---
layout: default
title:  "DeltaFS分析"
date:   2017-09-24
categories: filesystem
---

偶然的机会再github上发现了一个比较多提交的开源项目，[DeltaFS](https://github.com/pdlfs/deltafs),，来自四大牛校CMU的PDL实验室，已经有1000多次提交，11个release，像是在玩真的，仔细看了下主要提交者似乎是个中国人，叫Qing Zheng，有机会一定要找他多学习下。

于是找来了DeltaFS的论文，整体架构run在IndexFS之上，而IndexFS与我们的思路有很多可以match的地方，正好看看这个FS到底要做啥。

## 1 背景

这么多年来，分布式FS一般都是为大带宽设计的，作者设计了IndexFS，能够解决海量小元数据的问题。但是尽管如此，这些文件系统都需要跑在自己专用费服务器上，同时仍旧有很多负载存在性能瓶颈无法解决。作者就想设计一个不需要独立服务器的分布式FS，难道是超融合的概念？

作者提出了一个新的无需专用服务器的FS的架构，能够做到每个并行任务启动的时候，实例化一个FS名字空间，并通过共享对象的方式或者export名字空间的方式与其他任务交互。作者号称这个叫serverless的分布式文件系统，最终性能相对传统分布式FS得到10倍级的提升。

传统的超算一般计算和存储分离部署，为了解决性能问题，很多HPC加了一层热点cache（用全Flash），用这个cache来聚合IO，batch到后台存储；而且一般有一小撮机器专用用来解决元数据路径的问题，比如Lustre，GPFS，PanFS之类。

将HPC跑在一些只有一个或者几个MDS的集群中，总会有一些性能瓶颈，而且大量的集群，为啥只放几个MDS呢？摆着大好的资源不去好好利用，硬是把瓶颈落在这几个核心MDS上，有理想的青年一定是看不惯的。so，设计一个新的东东吧。

于是IndexFS闪亮登场，一个无状态的全分布式MDS，可以在所有的节点跑MDS。但是如果上原始IndexFS的话，需要提前预留大量的节点来满足峰值的需求。这种与业务分离部署的方式太消耗成本啦。

## 1.1 DeltaFS的理想

实现一个巨大的统一名字空间的大FS成本高，性能损失大，做一个多名字空间联邦的FS性能会更优，而且更容易扩展到很大。

在DeltaFS之前，作者设计过一个BatchFS，每个客户端能够在大资源池池中自己实例化一个私有名字空间的FS，这家伙就是大分布式FS的一个快照，并且能针对这个快照执行写入。之后，client端可以batch的方式把修改merge到global的FS中去。挺有意思的idea，完全类似git的思路，git clone，本地修改，然后批量push上去，应该会在特定的场景很有价值。这种架构能够保证大多数操作都是在自己的名字空间，中心存储只需要接到少了batch的操作，极大提升整个系统性能。

受BatchFS的启发，作者提出了一个演进的方案，DeltaFS，这玩意不需要异步的提交merge。用了一新的registration服务去展示不同的FS view，并允许应用去发布和查询名字空间的快照。做到应用内部强一致性，各个应用之间松耦合。并能通过聚合多个名字空间组成一个新的FS view。DeltaFS的核心要点如下：

- 无服务器的设计，没有统一的全局名字空间，no ground truth（不知如何翻译）
- 客户端来提供MDS的run time环境，以及扩展的环境，极其灵活和方便扩展
- 写优化的LSM tree来做元数据的存储和快照，这个是数据共享和负载执行的基础
- 每个FS都是随着业务需求临时启动来提供临时的view
- 简化数据中心的一致性问题，能够支持多种后台存储方案，包括对象存储，平坦名字空间的数据存储，已经一些不完备的文件语义的存储。




![]({{ site.baseurl }}/assets/haystack-1.png)
